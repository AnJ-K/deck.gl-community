"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8142],{3905:(e,d,t)=>{t.d(d,{Zo:()=>u,kt:()=>c});var r=t(7294);function n(e,d,t){return d in e?Object.defineProperty(e,d,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[d]=t,e}function i(e,d){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);d&&(r=r.filter((function(d){return Object.getOwnPropertyDescriptor(e,d).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var d=1;d<arguments.length;d++){var t=null!=arguments[d]?arguments[d]:{};d%2?i(Object(t),!0).forEach((function(d){n(e,d,t[d])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(d){Object.defineProperty(e,d,Object.getOwnPropertyDescriptor(t,d))}))}return e}function a(e,d){if(null==e)return{};var t,r,n=function(e,d){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],d.indexOf(t)>=0||(n[t]=e[t]);return n}(e,d);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],d.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),g=function(e){var d=r.useContext(l),t=d;return e&&(t="function"==typeof e?e(d):o(o({},d),e)),t},u=function(e){var d=g(e.components);return r.createElement(l.Provider,{value:d},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var d=e.children;return r.createElement(r.Fragment,{},d)}},h=r.forwardRef((function(e,d){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=g(t),h=n,c=p["".concat(l,".").concat(h)]||p[h]||s[h]||i;return t?r.createElement(c,o(o({ref:d},u),{},{components:t})):r.createElement(c,o({ref:d},u))}));function c(e,d){var t=arguments,n=d&&d.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=h;var a={};for(var l in d)hasOwnProperty.call(d,l)&&(a[l]=d[l]);a.originalType=e,a[p]="string"==typeof e?e:n,o[1]=a;for(var g=2;g<i;g++)o[g]=t[g];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},2871:(e,d,t)=>{t.r(d),t.d(d,{assets:()=>l,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>a,toc:()=>g});var r=t(7462),n=(t(7294),t(3905));const i={},o="Graph Class",a={unversionedId:"modules/react-graph-layers/api-reference/graph",id:"modules/react-graph-layers/api-reference/graph",title:"Graph Class",description:"The Graph class is the base class of the graph.",source:"@site/../docs/modules/react-graph-layers/api-reference/graph.md",sourceDirName:"modules/react-graph-layers/api-reference",slug:"/modules/react-graph-layers/api-reference/graph",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/graph",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/react-graph-layers/api-reference/graph.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"D3 Force Layout",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/d3-layout"},next:{title:"Node Class",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/node"}},l={},g=[{value:"Constructor",id:"constructor",level:2},{value:"<code>graph</code> (Graph, optional)",id:"graph-graph-optional",level:5},{value:"setGraphName()",id:"setgraphname",level:2},{value:"getGraphName()",id:"getgraphname",level:2},{value:"addEdge(edge)",id:"addedgeedge",level:2},{value:"<code>edge</code> (Edge, required)",id:"edge-edge-required",level:5},{value:"addNode(node)",id:"addnodenode",level:2},{value:"<code>node</code> (Node, required)",id:"node-node-required",level:5},{value:"batchAddEdges(edges)",id:"batchaddedgesedges",level:2},{value:"<code>edges</code> (Edge[], required)",id:"edges-edge-required",level:5},{value:"batchAddNodes(nodes)",id:"batchaddnodesnodes",level:2},{value:"<code>nodes</code> (Node[], required)",id:"nodes-node-required",level:5},{value:"findEdge(edgeId)",id:"findedgeedgeid",level:2},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required",level:5},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required-1",level:5},{value:"findNode(nodeId)",id:"findnodenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required",level:5},{value:"getDegree(nodeId)",id:"getdegreenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-1",level:5},{value:"getEdgeMap()",id:"getedgemap",level:2},{value:"getEdges()",id:"getedges",level:2},{value:"getConnectedEdges(nodeId)",id:"getconnectededgesnodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-2",level:5},{value:"getNodeMap()",id:"getnodemap",level:2},{value:"getNodes()",id:"getnodes",level:2},{value:"getNodeSiblings(nodeId)",id:"getnodesiblingsnodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-3",level:5},{value:"isEmpty()",id:"isempty",level:2},{value:"removeEdge(edgeId)",id:"removeedgeedgeid",level:2},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required-2",level:5},{value:"removeNode(nodeId)",id:"removenodenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-4",level:5},{value:"reset()",id:"reset",level:2},{value:"resetEdges()",id:"resetedges",level:2},{value:"resetNodes()",id:"resetnodes",level:2},{value:"<code>cb</code> (Function, required)",id:"cb-function-required",level:5},{value:"updateEdge(edge)",id:"updateedgeedge",level:2},{value:"<code>edge</code> (Edge, required)",id:"edge-edge-required-1",level:5},{value:"updateNode(node)",id:"updatenodenode",level:2},{value:"<code>node</code> (Node, required)",id:"node-node-required-1",level:5}],u={toc:g},p="wrapper";function s(e){let{components:d,...t}=e;return(0,n.kt)(p,(0,r.Z)({},u,t,{components:d,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"graph-class"},"Graph Class"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Graph")," class is the base class of the graph."),(0,n.kt)("h2",{id:"constructor"},"Constructor"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"new Graph(graph);\n")),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("h5",{id:"graph-graph-optional"},(0,n.kt)("inlineCode",{parentName:"h5"},"graph")," (Graph, optional)"),(0,n.kt)("h2",{id:"setgraphname"},"setGraphName()"),(0,n.kt)("p",null,"Set the name of the graph."),(0,n.kt)("h2",{id:"getgraphname"},"getGraphName()"),(0,n.kt)("p",null,"Get the name of the graph. Normally it can be used for dirty check."),(0,n.kt)("h2",{id:"addedgeedge"},"addEdge(edge)"),(0,n.kt)("p",null,"Add a new edge to the graph."),(0,n.kt)("h5",{id:"edge-edge-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"edge")," (Edge, required)"),(0,n.kt)("p",null,"Expect a Edge object to be added to the graph."),(0,n.kt)("h2",{id:"addnodenode"},"addNode(node)"),(0,n.kt)("p",null,"Add a new node to the graph."),(0,n.kt)("h5",{id:"node-node-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"node")," (Node, required)"),(0,n.kt)("p",null,"Expect a Node object to be added to the graph."),(0,n.kt)("h2",{id:"batchaddedgesedges"},"batchAddEdges(edges)"),(0,n.kt)("p",null,"Batch add edges to the graph."),(0,n.kt)("h5",{id:"edges-edge-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"edges")," (Edge[], required)"),(0,n.kt)("p",null,"Expect a list of Edge objects to be added to the graph."),(0,n.kt)("h2",{id:"batchaddnodesnodes"},"batchAddNodes(nodes)"),(0,n.kt)("p",null,"Batch add nodes to the graph."),(0,n.kt)("h5",{id:"nodes-node-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodes")," (Node[], required)"),(0,n.kt)("p",null,"Expect a list of Node objects to be added to the graph."),(0,n.kt)("h2",{id:"findedgeedgeid"},"findEdge(edgeId)"),(0,n.kt)("h5",{id:"edgeid-stringnumber-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target edge ID."),(0,n.kt)("p",null,"Find the edge by edge ID."),(0,n.kt)("h5",{id:"edgeid-stringnumber-required-1"},(0,n.kt)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target edge ID."),(0,n.kt)("h2",{id:"findnodenodeid"},"findNode(nodeId)"),(0,n.kt)("p",null,"Find the node by node ID."),(0,n.kt)("h5",{id:"nodeid-stringnumber-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target node ID."),(0,n.kt)("h2",{id:"getdegreenodeid"},"getDegree(nodeId)"),(0,n.kt)("p",null,"Get the degree of the node by node ID."),(0,n.kt)("h5",{id:"nodeid-stringnumber-required-1"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target node ID."),(0,n.kt)("h2",{id:"getedgemap"},"getEdgeMap()"),(0,n.kt)("p",null,"Get the edge map of the graph. The key of the map is the ID of the edges."),(0,n.kt)("h2",{id:"getedges"},"getEdges()"),(0,n.kt)("p",null,"Get all the edges of the graph."),(0,n.kt)("h2",{id:"getconnectededgesnodeid"},"getConnectedEdges(nodeId)"),(0,n.kt)("p",null,"Return all the connected edges of a node by nodeID."),(0,n.kt)("h5",{id:"nodeid-stringnumber-required-2"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target node ID."),(0,n.kt)("h2",{id:"getnodemap"},"getNodeMap()"),(0,n.kt)("p",null,"Get the node map of the graph. The key of the map is the ID of the nodes."),(0,n.kt)("h2",{id:"getnodes"},"getNodes()"),(0,n.kt)("p",null,"Get all the nodes of the graph."),(0,n.kt)("h2",{id:"getnodesiblingsnodeid"},"getNodeSiblings(nodeId)"),(0,n.kt)("p",null,"Return all the sibling nodes of a node by nodeID."),(0,n.kt)("h5",{id:"nodeid-stringnumber-required-3"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target node ID."),(0,n.kt)("h2",{id:"isempty"},"isEmpty()"),(0,n.kt)("p",null,"Return true if the graph is empty."),(0,n.kt)("h2",{id:"removeedgeedgeid"},"removeEdge(edgeId)"),(0,n.kt)("p",null,"Remove an edge from the graph by the edge ID"),(0,n.kt)("h5",{id:"edgeid-stringnumber-required-2"},(0,n.kt)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target edge ID."),(0,n.kt)("h2",{id:"removenodenodeid"},"removeNode(nodeId)"),(0,n.kt)("p",null,"Remove a node from the graph by node ID"),(0,n.kt)("h5",{id:"nodeid-stringnumber-required-4"},(0,n.kt)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,n.kt)("p",null,"The target node ID."),(0,n.kt)("h2",{id:"reset"},"reset()"),(0,n.kt)("p",null,"Clean up everything in the graph."),(0,n.kt)("h2",{id:"resetedges"},"resetEdges()"),(0,n.kt)("p",null,"Clean up all the edges in the graph."),(0,n.kt)("h2",{id:"resetnodes"},"resetNodes()"),(0,n.kt)("p",null,"Clean up all the nodes in the graph."),(0,n.kt)("h1",{id:"transactioncb"},"transaction(cb)"),(0,n.kt)("p",null,"Perform a batch of operations defined by cb before indicating graph is updated"),(0,n.kt)("h5",{id:"cb-function-required"},(0,n.kt)("inlineCode",{parentName:"h5"},"cb")," (Function, required)"),(0,n.kt)("h2",{id:"updateedgeedge"},"updateEdge(edge)"),(0,n.kt)("p",null,"Update the indicated edge to the provided value"),(0,n.kt)("h5",{id:"edge-edge-required-1"},(0,n.kt)("inlineCode",{parentName:"h5"},"edge")," (Edge, required)"),(0,n.kt)("h2",{id:"updatenodenode"},"updateNode(node)"),(0,n.kt)("p",null,"Update the indicated node to the provided value"),(0,n.kt)("h5",{id:"node-node-required-1"},(0,n.kt)("inlineCode",{parentName:"h5"},"node")," (Node, required)"))}s.isMDXComponent=!0}}]);