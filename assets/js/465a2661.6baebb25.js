"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9304],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i="D3 Force Layout",l={unversionedId:"modules/react-graph-layers/api-reference/d3-layout",id:"modules/react-graph-layers/api-reference/d3-layout",title:"D3 Force Layout",description:"This layout is an integration between d3-force and react-graph-layers to render the layout in a WebGL context.",source:"@site/../docs/modules/react-graph-layers/api-reference/d3-layout.md",sourceDirName:"modules/react-graph-layers/api-reference",slug:"/modules/react-graph-layers/api-reference/d3-layout",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/d3-layout",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/react-graph-layers/api-reference/d3-layout.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simple Layout",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/simple-layout"},next:{title:"Graph Class",permalink:"/deck.gl-community/docs/modules/react-graph-layers/api-reference/graph"}},s={},u=[{value:"Configurations",id:"configurations",level:2},{value:"alpha (Number, optional)",id:"alpha-number-optional",level:4},{value:"resumeAlpha (Number, optional)",id:"resumealpha-number-optional",level:4},{value:"nBodyStrength: (Number, optional)",id:"nbodystrength-number-optional",level:4},{value:"nBodyDistanceMin (Number, optional)",id:"nbodydistancemin-number-optional",level:4},{value:"nBodyDistanceMax (Number, optional)",id:"nbodydistancemax-number-optional",level:4},{value:"getCollisionRadius (Number, optional)",id:"getcollisionradius-number-optional",level:4}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"d3-force-layout"},"D3 Force Layout"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"/gatsby/images/layouts/d3.png",height:"400"})),(0,a.kt)("p",null,"This layout is an integration between ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-force"},"d3-force")," and react-graph-layers to render the layout in a WebGL context."),(0,a.kt)("h2",{id:"configurations"},"Configurations"),(0,a.kt)("p",null,"You can set the custom configuration to the d3-force layout directed by passing a configuration object when instantiating the layout object for GraphGL."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"<GraphGL\n  {...otherProps}\n  layout={\n    new D3ForceLayout({\n      nBodyStrength: 10,\n      nBodyDistanceMin: 1,\n      nBodyDistanceMax: 10,\n    })\n  }\n/>\n")),(0,a.kt)("h4",{id:"alpha-number-optional"},"alpha (Number, optional)"),(0,a.kt)("p",null,"The target alpha of the layout for each iteration. If alpha is specified, sets the current alpha to the specified number in the range ","[0,1]",". The default value is 0.3."),(0,a.kt)("h4",{id:"resumealpha-number-optional"},"resumeAlpha (Number, optional)"),(0,a.kt)("p",null,"The resumeAlpha can be used to \u201creheat\u201d the simulation during interaction, such as when dragging a node, or to resume the simulation after temporarily pausing the layout.\nThe default value is 0.1."),(0,a.kt)("h4",{id:"nbodystrength-number-optional"},"nBodyStrength: (Number, optional)"),(0,a.kt)("p",null,"We use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-force#many-body"},"many-body")," as the charge force to apply force applies mutually amongst all nodes. It can be used to simulate gravity (attraction) if the ",(0,a.kt)("inlineCode",{parentName:"p"},"nBodyStrength")," is positive, or electrostatic charge (repulsion) if the ",(0,a.kt)("inlineCode",{parentName:"p"},"nBodyStrength")," is negative.\nThe default value is -900."),(0,a.kt)("h4",{id:"nbodydistancemin-number-optional"},"nBodyDistanceMin (Number, optional)"),(0,a.kt)("p",null,"Sets the minimum distance between nodes over which this force is considered. If distance is not 'nBodyDistanceMin', returns the current minimum distance, which defaults to 100."),(0,a.kt)("h4",{id:"nbodydistancemax-number-optional"},"nBodyDistanceMax (Number, optional)"),(0,a.kt)("p",null,"Sets the maximum distance between nodes over which this force is considered. If distance is not 'nBodyDistanceMin', returns the current minimum distance, which defaults to 400."),(0,a.kt)("h4",{id:"getcollisionradius-number-optional"},"getCollisionRadius (Number, optional)"),(0,a.kt)("p",null,"Sets the radius for collision detection. If getCollisionRadius is not specified, it defaults to zero radius for all nodes.\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-force#collision"},"collision force")," treats nodes as circles with a given radius, rather than points, and prevents nodes from overlapping."))}d.isMDXComponent=!0}}]);