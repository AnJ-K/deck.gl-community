"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,h=s["".concat(p,".").concat(m)]||s[m]||d[m]||l;return n?o.createElement(h,r(r({ref:t},u),{},{components:n})):o.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,r[1]=i;for(var c=2;c<l;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const l={},r="MeshLayer",i={unversionedId:"modules/editor-layers/api-reference/mesh-layer",id:"modules/editor-layers/api-reference/mesh-layer",title:"MeshLayer",description:"The Mesh Layer renders a number of arbitrary geometries. For example, a fleet of 3d cars each with a position and an orientation over the map.",source:"@site/../docs/modules/editor-layers/api-reference/mesh-layer.md",sourceDirName:"modules/editor-layers/api-reference",slug:"/modules/editor-layers/api-reference/mesh-layer",permalink:"/deck.gl-community/docs/modules/editor-layers/api-reference/mesh-layer",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editor-layers/api-reference/mesh-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PathMarkerLayer",permalink:"/deck.gl-community/docs/modules/editor-layers/api-reference/path-marker-layer"},next:{title:"Outline (Shader Module)",permalink:"/deck.gl-community/docs/modules/editor-layers/api-reference/outline"}},p={},c=[{value:"Properties",id:"properties",level:2},{value:"<code>mesh</code> (Geometry|Object)",id:"mesh-geometryobject",level:5},{value:"<code>texture</code> (Texture2D|Image|String, optional)",id:"texture-texture2dimagestring-optional",level:5},{value:"<code>sizeScale</code> (Number, optional)",id:"sizescale-number-optional",level:5},{value:"<code>getPosition</code> (Function, optional)",id:"getposition-function-optional",level:5},{value:"<code>getYaw</code> (Function, optional)",id:"getyaw-function-optional",level:5},{value:"<code>getPitch</code> (Function, optional)",id:"getpitch-function-optional",level:5},{value:"<code>getRoll</code> (Function, optional)",id:"getroll-function-optional",level:5},{value:"<code>getScale</code> (Function, optional)",id:"getscale-function-optional",level:5},{value:"<code>getTranslation</code> (Function, optional)",id:"gettranslation-function-optional",level:5},{value:"<code>getMatrix</code> (Function, optional)",id:"getmatrix-function-optional",level:5},{value:"<code>getColor</code> (Function|Array, optional)",id:"getcolor-functionarray-optional",level:5},{value:"<code>fp64</code> (Boolean, optional)",id:"fp64-boolean-optional",level:5},{value:"<code>lightSettings</code> (Object, optional)",id:"lightsettings-object-optional",level:5}],u={toc:c},s="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"meshlayer"},"MeshLayer"),(0,a.kt)("p",null,"The Mesh Layer renders a number of arbitrary geometries. For example, a fleet of 3d cars each with a position and an orientation over the map."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import DeckGL from '@deck.gl/react';\nimport { MeshLayer } from '@deck.gl/experimental-layers';\nimport { CubeGeometry } from 'luma.gl';\n\nconst App = ({ data, viewport }) => {\n  /**\n   * Data format:\n   * [\n   *   {\n   *     position: [-122.45, 37.7],\n   *     angle: 0,\n   *     color: [255, 0, 0]\n   *   },\n   *   {\n   *     position: [-122.46, 37.73],\n   *     angle: 90,\n   *     color: [0, 255, 0]\n   *   },\n   *   ...\n   * ]\n   */\n  const layer = new MeshLayer({\n    id: 'mesh-layer',\n    data,\n    sizeScale: 100,\n    texture: 'texture.png',\n    mesh: new CubeGeometry(),\n  });\n\n  return <DeckGL {...viewport} layers={[layer]} />;\n};\n")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h5",{id:"mesh-geometryobject"},(0,a.kt)("inlineCode",{parentName:"h5"},"mesh")," (Geometry|Object)"),(0,a.kt)("p",null,"The geometry to render for each data object.\nCan be a luma.gl ",(0,a.kt)("a",{parentName:"p",href:"https://luma.gl/docs/api-reference/engine/geometry"},"Geometry")," instance, or an object of attributes."),(0,a.kt)("p",null,"The following attributes are expected:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"positions")," (Float32Array) - 3d vertex offset from the object center, in meters"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"normals")," (Float32Array) - 3d nomals"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"texCoords")," (Float32Array) - 2d texture coordinates")),(0,a.kt)("h5",{id:"texture-texture2dimagestring-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"texture")," (Texture2D|Image|String, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default ",(0,a.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,a.kt)("p",null,"The texture of the geometries.\nCan be either a luma.gl ","[Texture2D]","(",(0,a.kt)("a",{parentName:"p",href:"https://luma.gl/docs/api-reference/webgl/texture-2d%5C"},"https://luma.gl/docs/api-reference/webgl/texture-2d\\"),") instance, an HTMLImageElement, or a url string to the texture image."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"texture")," is supplied, texture is used to render the geometries. Otherwise, object color obtained via the ",(0,a.kt)("inlineCode",{parentName:"p"},"getColor")," accessor is used."),(0,a.kt)("h5",{id:"sizescale-number-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"sizeScale")," (Number, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("p",null,"Multiplier to scale each geometry by."),(0,a.kt)("h5",{id:"getposition-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getPosition")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.position"))),(0,a.kt)("p",null,"This accessor returns the center position corresponding to an object in the ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," stream."),(0,a.kt)("h5",{id:"getyaw-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getYaw")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.yaw || object.angle || 0"))),(0,a.kt)("p",null,"The yaw (heading) in degrees of each object."),(0,a.kt)("h5",{id:"getpitch-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getPitch")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.pitch || 0"))),(0,a.kt)("p",null,"The pitch (elevation) in degrees of each object."),(0,a.kt)("h5",{id:"getroll-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getRoll")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.roll || 0"))),(0,a.kt)("p",null,"The roll (bank) in degrees of each object."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euler_angles"},"Euler angles"),"."),(0,a.kt)("h5",{id:"getscale-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getScale")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.scale || [1, 1, 1]"))),(0,a.kt)("p",null,"Scaling factor on the mesh along each axis."),(0,a.kt)("h5",{id:"gettranslation-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getTranslation")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => object.translation || [0, 0, 0]"))),(0,a.kt)("p",null,"Translation of the mesh along each axis. Offset from the center position given by ",(0,a.kt)("inlineCode",{parentName:"p"},"getPosition")),(0,a.kt)("h5",{id:"getmatrix-function-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getMatrix")," (Function, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"object => null"))),(0,a.kt)("p",null,"Explicitly define a 4x4 column-major model matrix for the mesh. If provided, will override\n",(0,a.kt)("inlineCode",{parentName:"p"},"getYaw"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getPitch"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getRoll"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getScale"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getTranslation"),"."),(0,a.kt)("h5",{id:"getcolor-functionarray-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"getColor")," (Function|Array, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 0, 0, 255]"))),(0,a.kt)("p",null,"The color of each object. Only used if ",(0,a.kt)("inlineCode",{parentName:"p"},"texture")," is empty."),(0,a.kt)("h5",{id:"fp64-boolean-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"fp64")," (Boolean, optional)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"false"))),(0,a.kt)("p",null,"Whether the layer should be rendered in high-precision 64-bit mode"),(0,a.kt)("h5",{id:"lightsettings-object-optional"},(0,a.kt)("inlineCode",{parentName:"h5"},"lightSettings")," (Object, optional)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TO BE REPLACED")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"@deck.gl/mesh-layers")))}d.isMDXComponent=!0}}]);