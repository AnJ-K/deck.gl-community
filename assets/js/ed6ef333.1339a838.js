"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9440],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(r),g=a,y=p["".concat(s,".").concat(g)]||p[g]||u[g]||o;return r?n.createElement(y,l(l({ref:t},c),{},{components:r})):n.createElement(y,l({ref:t},c))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},7816:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=r(8168),a=(r(6540),r(5680));const o={},l="react-graph-layers",i={unversionedId:"modules/react-graph-layers/developer-guide/get-started",id:"modules/react-graph-layers/developer-guide/get-started",title:"react-graph-layers",description:"Abstract",source:"@site/../docs/modules/react-graph-layers/developer-guide/get-started.md",sourceDirName:"modules/react-graph-layers/developer-guide",slug:"/modules/react-graph-layers/developer-guide/get-started",permalink:"/deck.gl-community/docs/modules/react-graph-layers/developer-guide/get-started",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/react-graph-layers/developer-guide/get-started.md",tags:[],version:"current",frontMatter:{}},s={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Roadmap",id:"roadmap",level:2},{value:"Get Started",id:"get-started",level:2},{value:"Setup Dev Environment",id:"setup-dev-environment",level:2},{value:"Clone the repo:",id:"clone-the-repo",level:4},{value:"Install yarn",id:"install-yarn",level:4},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Local Development",id:"local-development",level:4},{value:"Testing",id:"testing",level:4},{value:"Documentation",id:"documentation",level:4},{value:"Contributing",id:"contributing",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.yg)(p,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"react-graph-layers"},"react-graph-layers"),(0,a.yg)("p",{align:"center"},(0,a.yg)("img",{src:"https://i.imgur.com/BF9aOEu.png",height:"400"})),(0,a.yg)("h2",{id:"abstract"},"Abstract"),(0,a.yg)("p",null,"react-graph-layers is a React component for visualizing large graphs with several utility functions. It can build a highly customizable graph visualization through its composable API. The rendering is powered by deck.gl which is a WebGL based visualization framework.  With react-graph-layers, users are enabled to build various type of graph/network applications with minimum efforts while having the capability to extend the existing styles and layouts."),(0,a.yg)("h2",{id:"motivation"},"Motivation"),(0,a.yg)("p",null,"Uber originally started this project as Graph.gl. After stopping efforts on Graph.gl, the OpenJS Foundation has resumed efforts."),(0,a.yg)("p",null,"With react-graph-layers, developers are allowed to create graph visualization with minimum efforts while having the capability to override anything they want in the library."),(0,a.yg)("h2",{id:"roadmap"},"Roadmap"),(0,a.yg)("p",null,"TBD, we've just started a reboot to update dependencies and modernize the codebase to reflect current React best practices."),(0,a.yg)("h2",{id:"get-started"},"Get Started"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import GraphGL, {\n  JSONLoader,\n  NODE_TYPE,\n  D3ForceLayout\n} from 'react-deck-graph-layers';\n\nconst App = ({data}) => {\n  const graph = JSONLoader({\n    json: data,\n    nodeParser: node => ({id: node.id}),\n    edgeParser: edge => ({\n      id: edge.id,\n      sourceId: edge.sourceId,\n      targetId: edge.targetId,\n      directed: true,\n    }),\n  });\n  return (\n    <GraphGL\n      graph={graph}\n      layout={new D3ForceLayout()}\n      nodeStyle={[\n        {\n          type: NODE_TYPE.CIRCLE,\n          radius: 10,\n          fill: 'blue',\n          opacity: 1,\n        },\n      ]}\n      edgeStyle={{\n        stroke: 'black',\n        strokeWidth: 2,\n      }}\n      enableDragging\n    />\n  );\n}\n")),(0,a.yg)("h2",{id:"setup-dev-environment"},"Setup Dev Environment"),(0,a.yg)("h4",{id:"clone-the-repo"},"Clone the repo:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"git clone git@github.com:deck.gl-community/react-graph-layers.git\n")),(0,a.yg)("h4",{id:"install-yarn"},"Install yarn"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"brew update\nbrew install yarn\n")),(0,a.yg)("h4",{id:"install-dependencies"},"Install dependencies"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"yarn install\n")),(0,a.yg)("h4",{id:"local-development"},"Local Development"),(0,a.yg)("p",null,"You can write a story and open it in the docusaurus (using yarn 1.x):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"cd website\nyarn\nyarn start\n")),(0,a.yg)("h4",{id:"testing"},"Testing"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"yarn test\n")),(0,a.yg)("p",null,"To get coverage information, use:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"yarn cover\n")),(0,a.yg)("h4",{id:"documentation"},"Documentation"),(0,a.yg)("p",null,"You can add your documentation (markdown) in ",(0,a.yg)("inlineCode",{parentName:"p"},"docs/")," folder and the new chapter in ",(0,a.yg)("inlineCode",{parentName:"p"},"docs/table-of-contents.json"),".\nOpen the local website:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"cd website\nyarn\nyarn start\n")),(0,a.yg)("h4",{id:"contributing"},"Contributing"),(0,a.yg)("p",null,"PRs and bug reports are welcome. Note that you once your PR is\nabout to be merged, you will be asked to register as a contributor\nby filling in a short form."))}u.isMDXComponent=!0}}]);