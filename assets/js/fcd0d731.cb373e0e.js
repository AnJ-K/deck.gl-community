"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[549],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var o=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),y=a,g=d["".concat(s,".").concat(y)]||d[y]||h[y]||i;return n?o.createElement(g,r(r({ref:t},u),{},{components:n})):o.createElement(g,r({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(8168),a=(n(6540),n(5680));const i={},r="Write your own custom layout",l={unversionedId:"modules/graph-layers/api-reference/layouts/custom-layout",id:"modules/graph-layers/api-reference/layouts/custom-layout",title:"Write your own custom layout",description:"Here's the method you will likely to implement when creating your own custom layout:",source:"@site/../docs/modules/graph-layers/api-reference/layouts/custom-layout.md",sourceDirName:"modules/graph-layers/api-reference/layouts",slug:"/modules/graph-layers/api-reference/layouts/custom-layout",permalink:"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/custom-layout",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/graph-layers/api-reference/layouts/custom-layout.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"D3 Force Layout",permalink:"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/d3-layout"},next:{title:"Experimental Layouts",permalink:"/deck.gl-community/docs/modules/graph-layers/api-reference/layouts/layout-gallery"}},s={},p=[{value:"Lifecycles",id:"lifecycles",level:3},{value:"constructor",id:"constructor",level:3},{value:"Update the graph data",id:"update-the-graph-data",level:3},{value:"Compute layout",id:"compute-layout",level:3},{value:"Update layout",id:"update-layout",level:3},{value:"Getters",id:"getters",level:3},{value:"Full source code",id:"full-source-code",level:3}],u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"write-your-own-custom-layout"},"Write your own custom layout"),(0,a.yg)("p",null,"Here's the method you will likely to implement when creating your own custom layout:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import {BaseLayout} from 'react-graph-layers';\n\nexport default class MyLayout extends BaseLayout {\n  // initialize the layout\n  constructor(options) {}\n  // first time to pass the graph data into this layout\n  initializeGraph(graph) {}\n  // update the existing graph\n  updateGraph(grpah) {}\n  // start the layout calculation\n  start() {}\n  // update the layout calculation\n  update() {}\n  // resume the layout calculation manually\n  resume() {}\n  // stop the layout calculation manually\n  stop() {}\n  // Access the position of the node in the layout\n  // If the position is not available (not calculated), returning nullish will hide the node.\n  getNodePosition(node) {}\n  // access the layout information of the edge\n  getEdgePosition(edge) {}\n  // Pin the node to a designated position, and the node won't move anymore\n  lockNodePosition(node, x, y) {}\n  // Unlock the node, the node will be able to move freely.\n  unlockNodePosition(node) {}\n}\n")),(0,a.yg)("p",null,"We will start with a ",(0,a.yg)("inlineCode",{parentName:"p"},"RandomLayout")," as an example, you can follow the steps one by one and find the source code at the bottom."),(0,a.yg)("h3",{id:"lifecycles"},"Lifecycles"),(0,a.yg)("p",null,"For a graph layout, everything goes through a set of events. In each event, the layout will need to take the inputs and do the different computations. Lifecycle methods are various methods which are invoked at different phases of the lifecycle of a graph layout. If you are aware of these lifecycle events, it will enable you to control their entire flow and it will definitely help us to produce better results."),(0,a.yg)("p",null,"A layout goes through the following phases:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Mounting:\n",(0,a.yg)("inlineCode",{parentName:"li"},"constructor")," => ",(0,a.yg)("inlineCode",{parentName:"li"},"initializeGraph")," => ",(0,a.yg)("inlineCode",{parentName:"li"},"start")),(0,a.yg)("li",{parentName:"ul"},"Updating:\n",(0,a.yg)("inlineCode",{parentName:"li"},"updateGraph")," => ",(0,a.yg)("inlineCode",{parentName:"li"},"update"))),(0,a.yg)("p",null,"There are a few events that should be triggered when the layout changes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutStart()"),"\nWhen the layout starts, ",(0,a.yg)("inlineCode",{parentName:"p"},"onLayoutStart")," should be triggered to notify GraphGL/User. Some users might also want to leverage this event hook to perform different interactions, ex: show a spinner on the UI to indicate a new layout is computing.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutChange()"),"\nEvery time when the layout changes, ",(0,a.yg)("inlineCode",{parentName:"p"},"onLayoutChange")," should be triggered to notify GraphGL to re-render and update the view. Then GraphGL will use ",(0,a.yg)("inlineCode",{parentName:"p"},"getNodePosition")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"getEdgePosition")," to get the position information to render the graph. Some users might also want to leverage this event hook to perform different interactions, ex: show a spinner on the UI to indicate the layout is computing.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutDone()"),"\nWhen the layout is completed, 'onLayoutDone' should be triggered to notify GraphGL/User. Some users might also want to leverage this event hook to perform different interactions, ex: remove the spinner from the UI."))),(0,a.yg)("p",null,"If you want to implement the drag & drag interaction on nodes, you will have to implement:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"lockNodePosition"),": pin the node at the designated position."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"unlockNodePosition"),": free the node from the position."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"resume"),": resume the layout calculation.")),(0,a.yg)("p",null,"The sequence of the events is like:\nstartDragging => lockNodePosition => release => unlockNodePosition => resume"),(0,a.yg)("h3",{id:"constructor"},"constructor"),(0,a.yg)("p",null,"In the constructor, you can initialize some internal object you'll need for the layout state.\nThe most important part is to create a 'map' to keep the position of nodes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"export default class RandomLayout extends BaseLayout {\n  static defaultOptions = {\n    viewportWidth: 1000,\n    viewportHeight: 1000\n  };\n\n  constructor(options) {\n    // init BaseLayout\n    super(options);\n    // give a name to this layout\n    this._name = 'RandomLayout';\n    // combine the default options with user input\n    this._options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    // a map to persis the position of nodes.\n    this._nodePositionMap = {};\n  }\n}\n")),(0,a.yg)("h3",{id:"update-the-graph-data"},"Update the graph data"),(0,a.yg)("p",null,"GraphGL will call ",(0,a.yg)("inlineCode",{parentName:"p"},"initializeGraph")," to pass the graph data into the layout.\nIf the graph is the same one but part ofthe data is changed, GraphGL will call ",(0,a.yg)("inlineCode",{parentName:"p"},"updateGraph")," method to notify the layout."),(0,a.yg)("p",null,"In this case, we can just simply update the ",(0,a.yg)("inlineCode",{parentName:"p"},"this._nodePositionMap")," by going through all nodes in the graph."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n\n  updateGraph(grpah) {\n    this._graph = graph;\n    this._nodePositionMap = graph.getNodes().reduce((res, node) => {\n      res[node.getId()] = this._nodePositionMap[node.getId()] || [0, 0];\n      return res;\n    }, {});\n  }\n")),(0,a.yg)("h3",{id:"compute-layout"},"Compute layout"),(0,a.yg)("p",null,"GraphGL will call ",(0,a.yg)("inlineCode",{parentName:"p"},"start()")," of the layout to kick start the layout calculation.\nBefore starting the calculation you should call ",(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutStart()")," to notify that a new layout has been started\nIn this case, the computation is easy as assigning random position for each node only.\nOnce the layout is completed, you will need to call ",(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutChange()")," to notify the render redraw.\nThen call ",(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutDone()")," to notify the render that layout is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"  start() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._onLayoutStart();\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._onLayoutChange();\n    this._onLayoutDone();\n  }\n")),(0,a.yg)("h3",{id:"update-layout"},"Update layout"),(0,a.yg)("p",null,"GraphGL will call ",(0,a.yg)("inlineCode",{parentName:"p"},"update()")," of the layout to update the layout calculation when a full new layout is not required.\nMost commonly this will be when nodes or edges of the graph are updated.\nIn this case we will simply assign a random position for each node.\nOnce the layout is completed, you will need to call ",(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutChange()")," to notify the render redraw.\nThen call ",(0,a.yg)("inlineCode",{parentName:"p"},"this._onLayoutDone()")," to notify the render that layout is completed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"  update() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._onLayoutChange();\n    this._onLayoutDone();\n  }\n")),(0,a.yg)("h3",{id:"getters"},"Getters"),(0,a.yg)("p",null,"GraphGL will keep retrieving the position of nodes and edges from the layout. You will need to provide two getters ",(0,a.yg)("inlineCode",{parentName:"p"},"getNodePosition")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"getEdgePosition"),"."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"getNodePosition: return the position of the node ","[x, y]",". If the position is not available (not calculated), returning nullish will hide the node."),(0,a.yg)("li",{parentName:"ul"},"getEdgePosition: return the rendering information of the edge, including:\n-- type: the type of the edge, it should be 'LINE', 'SPLINE_CURVE', or 'PATH'.\n-- sourcePosition: the position of source node.\n-- targetPosition: the position of target node.\n-- controlPoints: a set of control points for 'SPLINE_CURVE', or 'PATH' edge.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"getNodePosition = (node) => this._nodePositionMap[node.getId()];\n\ngetEdgePosition = (edge) => {\n  const sourcePos = this._nodePositionMap[edge.getSourceNodeId()];\n  const targetPos = this._nodePositionMap[edge.getTargetNodeId()];\n  return {\n    type: EDGE_TYPE.LINE,\n    sourcePosition: sourcePos,\n    targetPosition: targetPos,\n    controlPoints: []\n  };\n};\n")),(0,a.yg)("h3",{id:"full-source-code"},"Full source code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"import {BaseLayout} from 'react-graph-layers';\n\nexport default class RandomLayout extends BaseLayout {\n  constructor(options) {\n    super(options);\n    this._name = 'RandomLayout';\n    this._options = {\n      ...defaultOptions,\n      ...options\n    };\n    this._nodePositionMap = {};\n  }\n\n  // first time to pass the graph data into this layout\n  initializeGraph(graph) {\n    this.updateGraph(graph);\n  }\n  // update the existing graph\n  updateGraph(grpah) {\n    this._graph = graph;\n    this._nodePositionMap = graph.getNodes().reduce((res, node) => {\n      res[node.getId()] = this._nodePositionMap[node.getId()] || [0, 0];\n      return res;\n    }, {});\n  }\n\n  start() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._onLayoutStart();\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._onLayoutChange();\n    this._onLayoutDone();\n  }\n\n  update() {\n    const {viewportWidth, viewportHeight} = this._options;\n    this._nodePositionMap = Object.keys(this._nodePositionMap).reduce((res, nodeId) => {\n      res[nodeId] = [Math.random() * viewportWidth, Math.random() * viewportHeight];\n      return res;\n    }, {});\n    this._onLayoutChange();\n    this._onLayoutDone();\n  }\n\n  getNodePosition = (node) => this._nodePositionMap[node.getId()];\n\n  getEdgePosition = (edge) => {\n    const sourcePos = this._nodePositionMap[edge.getSourceNodeId()];\n    const targetPos = this._nodePositionMap[edge.getTargetNodeId()];\n    return {\n      type: EDGE_TYPE.LINE,\n      sourcePosition: sourcePos,\n      targetPosition: targetPos,\n      controlPoints: []\n    };\n  };\n}\n")))}h.isMDXComponent=!0}}]);