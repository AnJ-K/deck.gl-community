"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[109],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(y,l(l({ref:t},p),{},{components:r})):n.createElement(y,l({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6434:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},l="SelectionLayer",i={unversionedId:"modules/editor-layers/api-reference/selection-layer",id:"modules/editor-layers/api-reference/selection-layer",title:"SelectionLayer",description:"This layer can be used to select deck.gl objects using mouse drawing.",source:"@site/../docs/modules/editor-layers/api-reference/selection-layer.md",sourceDirName:"modules/editor-layers/api-reference",slug:"/modules/editor-layers/api-reference/selection-layer",permalink:"/docs/modules/editor-layers/api-reference/selection-layer",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editor-layers/api-reference/selection-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EditableGeoJsonLayer",permalink:"/docs/modules/editor-layers/api-reference/editable-geojson-layer"},next:{title:"PathMarkerLayer",permalink:"/docs/modules/editor-layers/api-reference/path-marker-layer"}},c={},s=[{value:"Properties",id:"properties",level:2},{value:"<code>selectionType</code> (String, required)",id:"selectiontype-string-required",level:4},{value:"<code>onSelect</code> (Function, required)",id:"onselect-function-required",level:4},{value:"<code>layerIds</code> (String[], required)",id:"layerids-string-required",level:4}],p={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"selectionlayer"},"SelectionLayer"),(0,o.kt)("p",null,"This layer can be used to select deck.gl objects using mouse drawing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SelectionLayer } from '@nebula.gl/layers';\nimport { StaticMap } from 'react-map-gl';\n\nconst MAPBOX_ACCESS_TOKEN = ''; // add your mapbox token here\n\nconst initialViewState = {\n  longitude: -73.986022,\n  latitude: 40.730743,\n  zoom: 12,\n};\n\nconst MALE_COLOR = [0, 128, 255];\nconst FEMALE_COLOR = [255, 0, 128];\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json'; // eslint-disable-line\n\nconst App = function () {\n  const radius = 30;\n  const maleColor = MALE_COLOR;\n  const femaleColor = FEMALE_COLOR;\n  const data = fetch(DATA_URL).then((resp) => resp.json());\n\n  const layers = [\n    new ScatterplotLayer({\n      id: 'scatter-plot',\n      data,\n      radiusScale: radius,\n      radiusMinPixels: 0.25,\n      getPosition: (d) => [d[0], d[1], 0],\n      getFillColor: (d) => (d[2] === 1 ? maleColor : femaleColor),\n      getRadius: 1,\n      pickable: true,\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor],\n      },\n    }),\n    new SelectionLayer({\n      id: 'selection',\n      selectionType: 'rectangle',\n      onSelect: ({ pickingInfos }) => {},\n      layerIds: ['scatter-plot'],\n      getTentativeFillColor: () => [255, 0, 255, 100],\n      getTentativeLineColor: () => [0, 0, 255, 255],\n      getTentativeLineDashArray: () => [0, 0],\n      lineWidthMinPixels: 1,\n    }),\n  ];\n\n  return (\n    <DeckGL initialViewState={initialViewState} controller={true} layers={layers}>\n      <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n    </DeckGL>\n  );\n};\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("p",null,"Inherits all ",(0,o.kt)("a",{parentName:"p",href:"https://deck.gl/docs/api-reference/core/layer"},"deck.gl's Base Layer")," properties."),(0,o.kt)("p",null,"Also inherites ",(0,o.kt)("strong",{parentName:"p"},"some")," EditableGeoJsonLayer properties."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: do not pass a data property.")),(0,o.kt)("h4",{id:"selectiontype-string-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"selectionType")," (String, required)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Default: ",(0,o.kt)("inlineCode",{parentName:"li"},"null"))),(0,o.kt)("p",null,"Either ",(0,o.kt)("inlineCode",{parentName:"p"},"rectangle")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"polygon")),(0,o.kt)("h4",{id:"onselect-function-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"onSelect")," (Function, required)"),(0,o.kt)("p",null,"Called when selection is completed."),(0,o.kt)("h4",{id:"layerids-string-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"layerIds")," (String[], required)"),(0,o.kt)("p",null,"Array of layer ids where we will search."))}u.isMDXComponent=!0}}]);