"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4158],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),g=r,m=c["".concat(d,".").concat(g)]||c[g]||y[g]||l;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(8168),r=(n(6540),n(5680));const l={},o="Get Started",i={unversionedId:"modules/editable-layers/developer-guide/old",id:"modules/editable-layers/developer-guide/old",title:"Get Started",description:"image",source:"@site/../docs/modules/editable-layers/developer-guide/old.md",sourceDirName:"modules/editable-layers/developer-guide",slug:"/modules/editable-layers/developer-guide/old",permalink:"/deck.gl-community/docs/modules/editable-layers/developer-guide/old",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editable-layers/developer-guide/old.md",tags:[],version:"current",frontMatter:{}},d={},s=[{value:"Getting started",id:"getting-started",level:2},{value:"Running the example",id:"running-the-example",level:3},{value:"Installation",id:"installation",level:3},{value:"<code>EditableGeoJsonLayer</code>",id:"editablegeojsonlayer",level:3},{value:"Useful examples (Codesandbox)",id:"useful-examples-codesandbox",level:3}],p={toc:s},c="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"get-started"},"Get Started"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://i.imgur.com/bRDL1oh.gif",alt:"image"})),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"@deck.gl-community/editable-layers")," provides editable and interactive map overlay layers, built using the power of ",(0,r.yg)("a",{parentName:"p",href:"https://deck.gl/"},"deck.gl"),"."),(0,r.yg)("h2",{id:"getting-started"},"Getting started"),(0,r.yg)("h3",{id:"running-the-example"},"Running the example"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"git clone git@github.com:uber/@deck.gl-community/editable-layers.git")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"cd @deck.gl-community/editable-layers")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"yarn")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"cd examples/advanced")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"yarn")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"export MapboxAccessToken='<Add your key>'")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"yarn start-local")),(0,r.yg)("li",{parentName:"ol"},"You can now view and edit geometry.")),(0,r.yg)("h3",{id:"installation"},"Installation"),(0,r.yg)("p",null,"For npm"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @deck.gl-community/editable-layers\n")),(0,r.yg)("p",null,"For yarn"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"yarn add @deck.gl-community/editable-layers\n")),(0,r.yg)("h3",{id:"editablegeojsonlayer"},(0,r.yg)("inlineCode",{parentName:"h3"},"EditableGeoJsonLayer")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/modules/editable-layers/api-reference/layers/editable-geojson-layer"},"EditableGeoJsonLayer")," is implemented as a ",(0,r.yg)("a",{parentName:"p",href:"https://deck.gl"},"deck.gl")," layer. It provides the ability to view and edit multiple types of geometry formatted as ",(0,r.yg)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7946"},"GeoJSON")," (an open standard format for geometry) including polygons, lines, and points."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jsx"},"import DeckGL from '@deck.gl/react';\nimport { EditableGeoJsonLayer, DrawPolygonMode } from '@deck.gl-community/editable-layers';\n\nconst myFeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    /* insert features here */\n  ],\n};\n\nconst selectedFeatureIndexes = [];\n\nclass App extends React.Component {\n  state = {\n    data: myFeatureCollection,\n  };\n\n  render() {\n    const layer = new EditableGeoJsonLayer({\n      id: 'geojson-layer',\n      data: this.state.data,\n      mode: DrawPolygonMode,\n      selectedFeatureIndexes,\n\n      onEdit: ({ updatedData }) => {\n        this.setState({\n          data: updatedData,\n        });\n      },\n    });\n\n    return <DeckGL {...this.props.viewport} layers={[layer]} />;\n  }\n}\n")),(0,r.yg)("h3",{id:"useful-examples-codesandbox"},"Useful examples (Codesandbox)"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://codesandbox.io/s/hello-world-nebulagl-csvsm"},"Hello World (using deck.gl)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://codesandbox.io/s/hello-nebulagl-with-toolbox-oelkr"},"With Toolbox")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://codesandbox.io/s/deckgl-and-nebulagl-editablegeojsonlayer-no-react-p9yrs"},"No React")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://codesandbox.io/s/connect-the-dots-mode-yow65"},"Custom EditMode"))))}y.isMDXComponent=!0}}]);