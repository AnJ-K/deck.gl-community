"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4598],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>g});var a=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,o=function(e,r){if(null==e)return{};var t,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),c=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(i.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||n;return t?a.createElement(g,l(l({ref:r},p),{},{components:t})):a.createElement(g,l({ref:r},p))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var n=t.length,l=new Array(n);l[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<n;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1573:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var a=t(8168),o=(t(6540),t(5680));const n={},l="Get Started",s={unversionedId:"modules/arrow-layers/developer-guide/get-started",id:"modules/arrow-layers/developer-guide/get-started",title:"Get Started",description:"Providing accessors",source:"@site/../docs/modules/arrow-layers/developer-guide/get-started.md",sourceDirName:"modules/arrow-layers/developer-guide",slug:"/modules/arrow-layers/developer-guide/get-started",permalink:"/deck.gl-community/docs/modules/arrow-layers/developer-guide/get-started",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/arrow-layers/developer-guide/get-started.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/deck.gl-community/docs/modules/arrow-layers/"},next:{title:"Layers",permalink:"/deck.gl-community/docs/modules/arrow-layers/api-reference/layers"}},i={},c=[{value:"Providing accessors",id:"providing-accessors",level:2},{value:"Pre-computed Arrow columns",id:"pre-computed-arrow-columns",level:3},{value:"Function accessors",id:"function-accessors",level:3},{value:"Data Loading",id:"data-loading",level:2},{value:"Arrow IPC",id:"arrow-ipc",level:3},{value:"Parquet",id:"parquet",level:3},{value:"GeoParquet",id:"geoparquet",level:3},{value:"FlatGeobuf",id:"flatgeobuf",level:3}],p={toc:c},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.yg)(d,(0,a.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"get-started"},"Get Started"),(0,o.yg)("h2",{id:"providing-accessors"},"Providing accessors"),(0,o.yg)("p",null,"All deck.gl layers have two types of properties: ",(0,o.yg)("a",{parentName:"p",href:"https://deck.gl/docs/api-reference/layers/scatterplot-layer#render-options"},'"Render Options"'),' \u2014 constant properties across a layer \u2014 and "Data Accessors" \u2014 properties that can vary across rows. An accessor is any property prefixed with ',(0,o.yg)("inlineCode",{parentName:"p"},"get"),", like ",(0,o.yg)("inlineCode",{parentName:"p"},"GeoArrowScatterplotLayer"),"'s ",(0,o.yg)("inlineCode",{parentName:"p"},"getFillColor"),"."),(0,o.yg)("p",null,"With ",(0,o.yg)("inlineCode",{parentName:"p"},"@deck.gl-community/arrow-layers")," specifically, there are two ways to pass these data accessors, either as pre-computed columns or with function callbacks on Arrow data."),(0,o.yg)("h3",{id:"pre-computed-arrow-columns"},"Pre-computed Arrow columns"),(0,o.yg)("p",null,"If you have an Arrow column (",(0,o.yg)("a",{parentName:"p",href:"https://arrow.apache.org/docs/js/classes/Arrow_dom.Vector.html"},(0,o.yg)("inlineCode",{parentName:"a"},"Vector"))," in Arrow JS terminology), you can pass that directly into a layer:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { Table } from "apache-arrow";\nimport { GeoArrowScatterplotLayer } from "@deck.gl-community/arrow-layers";\n\nconst table = new Table(...);\nconst deckLayer = new GeoArrowScatterplotLayer({\n  id: "scatterplot",\n  data: table,\n  /// Geometry column\n  getPosition: table.getChild("geometry")!,\n  /// Column of type FixedSizeList[3] or FixedSizeList[4], with child type Uint8\n  getFillColor: table.getChild("colors")!,\n});\n')),(0,o.yg)("p",null,"For example, ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/developmentseed/lonboard"},"lonboard")," computes Arrow columns on the Python side for all attributes so that end users have available the full capabilities Python. Then those columns are serialized to Python and the resulting ",(0,o.yg)("inlineCode",{parentName:"p"},"arrow.Vector")," is passed into the relevant layer."),(0,o.yg)("h3",{id:"function-accessors"},"Function accessors"),(0,o.yg)("p",null,"GeoArrow layers accept a callback that takes an object with ",(0,o.yg)("inlineCode",{parentName:"p"},"index")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"data"),". ",(0,o.yg)("inlineCode",{parentName:"p"},"data")," is an ",(0,o.yg)("inlineCode",{parentName:"p"},"arrow.RecordBatch")," object (a vertical section of the input ",(0,o.yg)("inlineCode",{parentName:"p"},"Table"),"), and ",(0,o.yg)("inlineCode",{parentName:"p"},"index")," is the positional index of the current row of that batch. In TypeScript, you should see accurate type checking."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'const deckLayer = new GeoArrowPathLayer({\n  id: "geoarrow-path",\n  data: table,\n  getColor: ({ index, data, target }) => {\n    const recordBatch = data.data;\n    const row = recordBatch.get(index)!;\n    return COLORS_LOOKUP[row["scalerank"]];\n  },\n}),\n')),(0,o.yg)("p",null,"The full example is in ",(0,o.yg)("inlineCode",{parentName:"p"},"examples/multilinestring/app.tsx"),"."),(0,o.yg)("p",null,"You can also use assign to the ",(0,o.yg)("inlineCode",{parentName:"p"},"target")," prop to reduce garbage collector overhead, as described in the ",(0,o.yg)("a",{parentName:"p",href:"https://deck.gl/docs/developer-guide/performance#supply-binary-blobs-to-the-data-prop"},"deck.gl performance guide"),"."),(0,o.yg)("h2",{id:"data-loading"},"Data Loading"),(0,o.yg)("p",null,"To create deck.gl layers using this library, you need to first get GeoArrow-formatted data into the browser, discussed below."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://gdal.org/"},"OGR/GDAL")," is useful for converting among data formats on the backend, and it includes both ",(0,o.yg)("a",{parentName:"p",href:"https://gdal.org/drivers/vector/arrow.html#vector-arrow"},"GeoArrow")," and ",(0,o.yg)("a",{parentName:"p",href:"https://gdal.org/drivers/vector/parquet.html"},"GeoParquet")," drivers. Pass ",(0,o.yg)("inlineCode",{parentName:"p"},"-lco GEOMETRY_ENCODING=GEOARROW")," when converting to Arrow or Parquet files in order to store geometries in a GeoArrow-native geometry column."),(0,o.yg)("h3",{id:"arrow-ipc"},"Arrow IPC"),(0,o.yg)("p",null,"If you already have Arrow IPC files (also called Feather files) with a GeoArrow geometry column, you can use ",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/apache-arrow"},(0,o.yg)("inlineCode",{parentName:"a"},"apache-arrow"))," to load those files."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { tableFromIPC } from "apache-arrow";\nimport { GeoArrowScatterplotLayer } from "@deck.gl-community/arrow-layers";\n\nconst resp = await fetch("url/to/file.arrow");\nconst jsTable = await tableFromIPC(resp);\nconst deckLayer = new GeoArrowScatterplotLayer({\n  id: "scatterplot",\n  data: jsTable,\n  /// Replace with the correct geometry column name\n  getPosition: jsTable.getChild("geometry")!,\n});\n')),(0,o.yg)("p",null,"Note those IPC files must be saved ",(0,o.yg)("strong",{parentName:"p"},"uncompressed")," (at least not internally compressed). As of v14, Arrow JS does not currently support loading IPC files with internal compression."),(0,o.yg)("h3",{id:"parquet"},"Parquet"),(0,o.yg)("p",null,"If you have a Parquet file where the geometry column is stored as ",(0,o.yg)("em",{parentName:"p"},"GeoArrow")," encoding (i.e. not as a binary column with WKB-encoded geometries), you can use the stable ",(0,o.yg)("inlineCode",{parentName:"p"},"parquet-wasm")," library to load those files."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { readParquet } from "parquet-wasm"\nimport { tableFromIPC } from "apache-arrow";\nimport { GeoArrowScatterplotLayer } from "@deck.gl-community/arrow-layers";\n\nconst resp = await fetch("url/to/file.parquet");\nconst arrayBuffer = await resp.arrayBuffer();\nconst wasmTable = readParquet(new Uint8Array(arrayBuffer));\nconst jsTable = tableFromIPC(wasmTable.intoIPCStream());\nconst deckLayer = new GeoArrowScatterplotLayer({\n  id: "scatterplot",\n  data: jsTable,\n  /// Replace with the correct geometry column name\n  getPosition: jsTable.getChild("geometry")!,\n});\n')),(0,o.yg)("p",null,"See below for instructions to load GeoParquet 1.0 files, which have WKB-encoded geometries that need to be decoded before they can be used with ",(0,o.yg)("inlineCode",{parentName:"p"},"@deck.gl-community/arrow-layers"),"."),(0,o.yg)("h3",{id:"geoparquet"},"GeoParquet"),(0,o.yg)("p",null,"An initial version of the ",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@geoarrow/geoparquet-wasm"},(0,o.yg)("inlineCode",{parentName:"a"},"@geoarrow/geoparquet-wasm"))," library is published, which reads a GeoParquet file to GeoArrow memory."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { readGeoParquet } from "@geoarrow/geoparquet-wasm";\nimport { tableFromIPC } from "apache-arrow";\nimport { GeoArrowScatterplotLayer } from "@deck.gl-community/arrow-layers";\n\nconst resp = await fetch("url/to/file.parquet");\nconst arrayBuffer = await resp.arrayBuffer();\nconst wasmTable = readGeoParquet(new Uint8Array(arrayBuffer));\nconst jsTable = tableFromIPC(wasmTable.intoTable().intoIPCStream());\nconst deckLayer = new GeoArrowScatterplotLayer({\n  id: "scatterplot",\n  data: jsTable,\n  /// Replace with the correct geometry column name\n  getPosition: jsTable.getChild("geometry")!,\n});\n')),(0,o.yg)("p",null,"If you hit a bug with ",(0,o.yg)("inlineCode",{parentName:"p"},"@geoarrow/geoparquet-wasm"),", please create a reproducible bug report ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/geoarrow/geoarrow-rs/issues/new"},"here"),"."),(0,o.yg)("h3",{id:"flatgeobuf"},"FlatGeobuf"),(0,o.yg)("p",null,"An initial version of the ",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@geoarrow/flatgeobuf-wasm"},(0,o.yg)("inlineCode",{parentName:"a"},"@geoarrow/flatgeobuf-wasm"))," library is published, which reads a FlatGeobuf file to GeoArrow memory. As of version 0.2.0-beta.1, this library does not yet support remote files, and expects the full FlatGeobuf file to exist in memory."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},'import { readFlatGeobuf } from "@geoarrow/flatgeobuf-wasm";\nimport { tableFromIPC } from "apache-arrow";\nimport { GeoArrowScatterplotLayer } from "@deck.gl-community/arrow-layers";\n\nconst resp = await fetch("url/to/file.fgb");\nconst arrayBuffer = await resp.arrayBuffer();\nconst wasmTable = readFlatGeobuf(new Uint8Array(arrayBuffer));\nconst jsTable = tableFromIPC(wasmTable.intoTable().intoIPCStream());\nconst deckLayer = new GeoArrowScatterplotLayer({\n  id: "scatterplot",\n  data: jsTable,\n  /// Replace with the correct geometry column name\n  getPosition: jsTable.getChild("geometry")!,\n});\n')),(0,o.yg)("p",null,"If you hit a bug with ",(0,o.yg)("inlineCode",{parentName:"p"},"@geoarrow/flatgeobuf-wasm"),", please create a reproducible bug report ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/geoarrow/geoarrow-rs/issues/new"},"here"),"."))}u.isMDXComponent=!0}}]);