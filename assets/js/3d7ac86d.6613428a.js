"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9265],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>m});var n=t(6540);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,l=function(e,r){if(null==e)return{};var t,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),u=l,m=d["".concat(c,".").concat(u)]||d[u]||y[u]||a;return t?n.createElement(m,o(o({ref:r},p),{},{components:t})):n.createElement(m,o({ref:r},p))}));function m(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3584:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=t(8168),l=(t(6540),t(5680));const a={},o="SelectionLayer",i={unversionedId:"modules/editable-layers/api-reference/layers/selection-layer",id:"modules/editable-layers/api-reference/layers/selection-layer",title:"SelectionLayer",description:"This layer can be used to select deck.gl objects using mouse drawing.",source:"@site/../docs/modules/editable-layers/api-reference/layers/selection-layer.md",sourceDirName:"modules/editable-layers/api-reference/layers",slug:"/modules/editable-layers/api-reference/layers/selection-layer",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/selection-layer",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editable-layers/api-reference/layers/selection-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EditableGeoJsonLayer",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/editable-geojson-layer"},next:{title:"PathMarkerLayer",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/layers/path-marker-layer"}},c={},s=[{value:"Properties",id:"properties",level:2},{value:"<code>selectionType</code> (String, required)",id:"selectiontype-string-required",level:4},{value:"<code>onSelect</code> (Function, required)",id:"onselect-function-required",level:4},{value:"<code>layerIds</code> (String[], required)",id:"layerids-string-required",level:4}],p={toc:s},d="wrapper";function y(e){let{components:r,...t}=e;return(0,l.yg)(d,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"selectionlayer"},"SelectionLayer"),(0,l.yg)("p",null,"This layer can be used to select deck.gl objects using mouse drawing."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SelectionLayer } from '@deck.gl-community/editable-layers';\nimport { StaticMap } from 'react-map-gl';\n\nconst MAPBOX_ACCESS_TOKEN = ''; // add your mapbox token here\n\nconst initialViewState = {\n  longitude: -73.986022,\n  latitude: 40.730743,\n  zoom: 12,\n};\n\nconst MALE_COLOR = [0, 128, 255];\nconst FEMALE_COLOR = [255, 0, 128];\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json'; // eslint-disable-line\n\nconst App = function () {\n  const radius = 30;\n  const maleColor = MALE_COLOR;\n  const femaleColor = FEMALE_COLOR;\n  const data = fetch(DATA_URL).then((resp) => resp.json());\n\n  const layers = [\n    new ScatterplotLayer({\n      id: 'scatter-plot',\n      data,\n      radiusScale: radius,\n      radiusMinPixels: 0.25,\n      getPosition: (d) => [d[0], d[1], 0],\n      getFillColor: (d) => (d[2] === 1 ? maleColor : femaleColor),\n      getRadius: 1,\n      pickable: true,\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor],\n      },\n    }),\n    new SelectionLayer({\n      id: 'selection',\n      selectionType: 'rectangle',\n      onSelect: ({ pickingInfos }) => {},\n      layerIds: ['scatter-plot'],\n      getTentativeFillColor: () => [255, 0, 255, 100],\n      getTentativeLineColor: () => [0, 0, 255, 255],\n      getTentativeLineDashArray: () => [0, 0],\n      lineWidthMinPixels: 1,\n    }),\n  ];\n\n  return (\n    <DeckGL initialViewState={initialViewState} controller={true} layers={layers}>\n      <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n    </DeckGL>\n  );\n};\n")),(0,l.yg)("h2",{id:"properties"},"Properties"),(0,l.yg)("p",null,"Inherits all ",(0,l.yg)("a",{parentName:"p",href:"https://deck.gl/docs/api-reference/core/layer"},"deck.gl's Base Layer")," properties."),(0,l.yg)("p",null,"Also inherites ",(0,l.yg)("strong",{parentName:"p"},"some")," EditableGeoJsonLayer properties."),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Note: do not pass a data property.")),(0,l.yg)("h4",{id:"selectiontype-string-required"},(0,l.yg)("inlineCode",{parentName:"h4"},"selectionType")," (String, required)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"null"))),(0,l.yg)("p",null,"Either ",(0,l.yg)("inlineCode",{parentName:"p"},"rectangle")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"polygon")),(0,l.yg)("h4",{id:"onselect-function-required"},(0,l.yg)("inlineCode",{parentName:"h4"},"onSelect")," (Function, required)"),(0,l.yg)("p",null,"Called when selection is completed."),(0,l.yg)("h4",{id:"layerids-string-required"},(0,l.yg)("inlineCode",{parentName:"h4"},"layerIds")," (String[], required)"),(0,l.yg)("p",null,"Array of layer ids where we will search."))}y.isMDXComponent=!0}}]);