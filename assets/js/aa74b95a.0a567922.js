"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[509],{5680:(e,a,t)=>{t.d(a,{xA:()=>u,yg:()=>g});var n=t(6540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var m=n.createContext({}),p=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=p(e.components);return n.createElement(m.Provider,{value:a},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,m=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(t),c=l,g=s["".concat(m,".").concat(c)]||s[c]||d[c]||r;return t?n.createElement(g,i(i({ref:a},u),{},{components:t})):n.createElement(g,i({ref:a},u))}));function g(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var m in a)hasOwnProperty.call(a,m)&&(o[m]=a[m]);o.originalType=e,o[s]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9636:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=t(8168),l=(t(6540),t(5680));const r={},i="Measurement Modes",o={unversionedId:"modules/editable-layers/api-reference/edit-modes/measurement-modes",id:"modules/editable-layers/api-reference/edit-modes/measurement-modes",title:"Measurement Modes",description:"A number of modes provide various measurement capabilities",source:"@site/../docs/modules/editable-layers/api-reference/edit-modes/measurement-modes.md",sourceDirName:"modules/editable-layers/api-reference/edit-modes",slug:"/modules/editable-layers/api-reference/edit-modes/measurement-modes",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/edit-modes/measurement-modes",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/editable-layers/api-reference/edit-modes/measurement-modes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Transform Modes",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/edit-modes/transform-modes"},next:{title:"Outline (Shader Module)",permalink:"/deck.gl-community/docs/modules/editable-layers/api-reference/shader-modules/outline"}},m={},p=[{value:"MeasureDistanceMode",id:"measuredistancemode",level:2},{value:"MeasureAreaMode",id:"measureareamode",level:2},{value:"MeasureAngleMode",id:"measureanglemode",level:2},{value:"ElevationMode",id:"elevationmode",level:2}],u={toc:p},s="wrapper";function d(e){let{components:a,...t}=e;return(0,l.yg)(s,(0,n.A)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"measurement-modes"},"Measurement Modes"),(0,l.yg)("p",null,"A number of modes provide various measurement capabilities"),(0,l.yg)("h2",{id:"measuredistancemode"},"MeasureDistanceMode"),(0,l.yg)("p",null,"User can measure a distance between two points."),(0,l.yg)("p",null,"The following options can be provided in the ",(0,l.yg)("inlineCode",{parentName:"p"},"modeConfig")," object:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"turfOptions")," (Object, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"options")," object passed to turf's ",(0,l.yg)("a",{parentName:"li",href:"https://turfjs.org/docs/#distance"},"distance")," function"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"undefined")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"formatTooltip")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to format tooltip text (argument is the numeric distance)"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"(distance) => parseFloat(distance).toFixed(2) + units")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"measurementCallback")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to call as measurements are calculated"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"undefined")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"centerTooltipsOnLine")," (Boolean, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"If true, the measurement tooltips appear on the middle of their respective line segments rather than at the end"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"false"))))),(0,l.yg)("p",null,(0,l.yg)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl-community/blob/master/modules/editable-layers/src/edit-modes/measure-distance-mode.ts"},"Source code")),(0,l.yg)("h2",{id:"measureareamode"},"MeasureAreaMode"),(0,l.yg)("p",null,"User can measure an area by drawing an arbitrary polygon."),(0,l.yg)("p",null,"The following options can be provided in the ",(0,l.yg)("inlineCode",{parentName:"p"},"modeConfig")," object:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"formatTooltip")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to format tooltip text (argument is the numeric area)"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"(distance) => parseFloat(distance).toFixed(2) + units")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"measurementCallback")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to call as measurements are calculated"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"undefined"))))),(0,l.yg)("p",null,(0,l.yg)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl-community/blob/master/modules/editable-layers/src/edit-modes/measure-area-mode.ts"},"Source code")),(0,l.yg)("h2",{id:"measureanglemode"},"MeasureAngleMode"),(0,l.yg)("p",null,"User can measure an angle by drawing two lines."),(0,l.yg)("p",null,"The following options can be provided in the ",(0,l.yg)("inlineCode",{parentName:"p"},"modeConfig")," object:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"formatTooltip")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to format tooltip text (argument is the numeric area)"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"(distance) => parseFloat(angle).toFixed(2) + units")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"measurementCallback")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Function to call as measurements are calculated"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"undefined"))))),(0,l.yg)("p",null,(0,l.yg)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl-community/blob/master/modules/editable-layers/src/edit-modes/measure-angle-mode.ts"},"Source code")),(0,l.yg)("h2",{id:"elevationmode"},"ElevationMode"),(0,l.yg)("p",null,"User can move a point up and down."),(0,l.yg)("p",null,"The following options can be provided in the ",(0,l.yg)("inlineCode",{parentName:"p"},"modeConfig")," object:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"minElevation")," (Number, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"The minimum elevation to allow"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"0")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"maxElevation")," (Number, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"The maximum elevation to allow"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"20000")))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"calculateElevationChange")," (Function, optional)"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"A function to use to calculate the elevation change in response to mouse movement"),(0,l.yg)("li",{parentName:"ul"},"Default: ",(0,l.yg)("inlineCode",{parentName:"li"},"10 * <vertical movement in pixels>")),(0,l.yg)("li",{parentName:"ul"},"Configure to use movement based on viewport:")))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-javascript"},"if (mode === 'elevation') {\n  modeConfig.calculateElevationChange = (opts) =>\n    ElevationMode.calculateElevationChangeWithViewport(viewport, opts);\n}\n")),(0,l.yg)("p",null,(0,l.yg)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl-community/blob/master/modules/editable-layers/src/edit-modes/elevation-mode.ts"},"Source code")))}d.isMDXComponent=!0}}]);