"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5044],{5680:(e,d,r)=>{r.d(d,{xA:()=>u,yg:()=>c});var n=r(6540);function t(e,d,r){return d in e?Object.defineProperty(e,d,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[d]=r,e}function i(e,d){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);d&&(n=n.filter((function(d){return Object.getOwnPropertyDescriptor(e,d).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var d=1;d<arguments.length;d++){var r=null!=arguments[d]?arguments[d]:{};d%2?i(Object(r),!0).forEach((function(d){t(e,d,r[d])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(d){Object.defineProperty(e,d,Object.getOwnPropertyDescriptor(r,d))}))}return e}function g(e,d){if(null==e)return{};var r,n,t=function(e,d){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],d.indexOf(r)>=0||(t[r]=e[r]);return t}(e,d);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],d.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var a=n.createContext({}),l=function(e){var d=n.useContext(a),r=d;return e&&(r="function"==typeof e?e(d):o(o({},d),e)),r},u=function(e){var d=l(e.components);return n.createElement(a.Provider,{value:d},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var d=e.children;return n.createElement(n.Fragment,{},d)}},h=n.forwardRef((function(e,d){var r=e.components,t=e.mdxType,i=e.originalType,a=e.parentName,u=g(e,["components","mdxType","originalType","parentName"]),p=l(r),h=t,c=p["".concat(a,".").concat(h)]||p[h]||s[h]||i;return r?n.createElement(c,o(o({ref:d},u),{},{components:r})):n.createElement(c,o({ref:d},u))}));function c(e,d){var r=arguments,t=d&&d.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=h;var g={};for(var a in d)hasOwnProperty.call(d,a)&&(g[a]=d[a]);g.originalType=e,g[p]="string"==typeof e?e:t,o[1]=g;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},2213:(e,d,r)=>{r.r(d),r.d(d,{assets:()=>a,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>g,toc:()=>l});var n=r(8168),t=(r(6540),r(5680));const i={},o="Graph Class",g={unversionedId:"modules/graph-layers/api-reference/graph",id:"modules/graph-layers/api-reference/graph",title:"Graph Class",description:"The Graph class is the base class of the graph.",source:"@site/../docs/modules/graph-layers/api-reference/graph.md",sourceDirName:"modules/graph-layers/api-reference",slug:"/modules/graph-layers/api-reference/graph",permalink:"/deck.gl-community/docs/modules/graph-layers/api-reference/graph",draft:!1,editUrl:"https://github.com/visgl/deck.gl-community/tree/master/website/../docs/modules/graph-layers/api-reference/graph.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/deck.gl-community/docs/modules/graph-layers/"},next:{title:"Node Class",permalink:"/deck.gl-community/docs/modules/graph-layers/api-reference/node"}},a={},l=[{value:"Constructor",id:"constructor",level:2},{value:"<code>graph</code> (Graph, optional)",id:"graph-graph-optional",level:5},{value:"setGraphName()",id:"setgraphname",level:2},{value:"getGraphName()",id:"getgraphname",level:2},{value:"addEdge(edge)",id:"addedgeedge",level:2},{value:"<code>edge</code> (Edge, required)",id:"edge-edge-required",level:5},{value:"addNode(node)",id:"addnodenode",level:2},{value:"<code>node</code> (Node, required)",id:"node-node-required",level:5},{value:"batchAddEdges(edges)",id:"batchaddedgesedges",level:2},{value:"<code>edges</code> (Edge[], required)",id:"edges-edge-required",level:5},{value:"batchAddNodes(nodes)",id:"batchaddnodesnodes",level:2},{value:"<code>nodes</code> (Node[], required)",id:"nodes-node-required",level:5},{value:"findEdge(edgeId)",id:"findedgeedgeid",level:2},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required",level:5},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required-1",level:5},{value:"findNode(nodeId)",id:"findnodenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required",level:5},{value:"getDegree(nodeId)",id:"getdegreenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-1",level:5},{value:"getEdgeMap()",id:"getedgemap",level:2},{value:"getEdges()",id:"getedges",level:2},{value:"getConnectedEdges(nodeId)",id:"getconnectededgesnodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-2",level:5},{value:"getNodeMap()",id:"getnodemap",level:2},{value:"getNodes()",id:"getnodes",level:2},{value:"getNodeSiblings(nodeId)",id:"getnodesiblingsnodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-3",level:5},{value:"isEmpty()",id:"isempty",level:2},{value:"removeEdge(edgeId)",id:"removeedgeedgeid",level:2},{value:"<code>edgeId</code> (String|Number, required)",id:"edgeid-stringnumber-required-2",level:5},{value:"removeNode(nodeId)",id:"removenodenodeid",level:2},{value:"<code>nodeId</code> (String|Number, required)",id:"nodeid-stringnumber-required-4",level:5},{value:"reset()",id:"reset",level:2},{value:"resetEdges()",id:"resetedges",level:2},{value:"resetNodes()",id:"resetnodes",level:2},{value:"<code>cb</code> (Function, required)",id:"cb-function-required",level:5},{value:"updateEdge(edge)",id:"updateedgeedge",level:2},{value:"<code>edge</code> (Edge, required)",id:"edge-edge-required-1",level:5},{value:"updateNode(node)",id:"updatenodenode",level:2},{value:"<code>node</code> (Node, required)",id:"node-node-required-1",level:5}],u={toc:l},p="wrapper";function s(e){let{components:d,...r}=e;return(0,t.yg)(p,(0,n.A)({},u,r,{components:d,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"graph-class"},"Graph Class"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Graph")," class is the base class of the graph."),(0,t.yg)("h2",{id:"constructor"},"Constructor"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"new Graph(graph);\n")),(0,t.yg)("p",null,"Parameters:"),(0,t.yg)("h5",{id:"graph-graph-optional"},(0,t.yg)("inlineCode",{parentName:"h5"},"graph")," (Graph, optional)"),(0,t.yg)("h2",{id:"setgraphname"},"setGraphName()"),(0,t.yg)("p",null,"Set the name of the graph."),(0,t.yg)("h2",{id:"getgraphname"},"getGraphName()"),(0,t.yg)("p",null,"Get the name of the graph. Normally it can be used for dirty check."),(0,t.yg)("h2",{id:"addedgeedge"},"addEdge(edge)"),(0,t.yg)("p",null,"Add a new edge to the graph."),(0,t.yg)("h5",{id:"edge-edge-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"edge")," (Edge, required)"),(0,t.yg)("p",null,"Expect a Edge object to be added to the graph."),(0,t.yg)("h2",{id:"addnodenode"},"addNode(node)"),(0,t.yg)("p",null,"Add a new node to the graph."),(0,t.yg)("h5",{id:"node-node-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"node")," (Node, required)"),(0,t.yg)("p",null,"Expect a Node object to be added to the graph."),(0,t.yg)("h2",{id:"batchaddedgesedges"},"batchAddEdges(edges)"),(0,t.yg)("p",null,"Batch add edges to the graph."),(0,t.yg)("h5",{id:"edges-edge-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"edges")," (Edge[], required)"),(0,t.yg)("p",null,"Expect a list of Edge objects to be added to the graph."),(0,t.yg)("h2",{id:"batchaddnodesnodes"},"batchAddNodes(nodes)"),(0,t.yg)("p",null,"Batch add nodes to the graph."),(0,t.yg)("h5",{id:"nodes-node-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodes")," (Node[], required)"),(0,t.yg)("p",null,"Expect a list of Node objects to be added to the graph."),(0,t.yg)("h2",{id:"findedgeedgeid"},"findEdge(edgeId)"),(0,t.yg)("h5",{id:"edgeid-stringnumber-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target edge ID."),(0,t.yg)("p",null,"Find the edge by edge ID."),(0,t.yg)("h5",{id:"edgeid-stringnumber-required-1"},(0,t.yg)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target edge ID."),(0,t.yg)("h2",{id:"findnodenodeid"},"findNode(nodeId)"),(0,t.yg)("p",null,"Find the node by node ID."),(0,t.yg)("h5",{id:"nodeid-stringnumber-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target node ID."),(0,t.yg)("h2",{id:"getdegreenodeid"},"getDegree(nodeId)"),(0,t.yg)("p",null,"Get the degree of the node by node ID."),(0,t.yg)("h5",{id:"nodeid-stringnumber-required-1"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target node ID."),(0,t.yg)("h2",{id:"getedgemap"},"getEdgeMap()"),(0,t.yg)("p",null,"Get the edge map of the graph. The key of the map is the ID of the edges."),(0,t.yg)("h2",{id:"getedges"},"getEdges()"),(0,t.yg)("p",null,"Get all the edges of the graph."),(0,t.yg)("h2",{id:"getconnectededgesnodeid"},"getConnectedEdges(nodeId)"),(0,t.yg)("p",null,"Return all the connected edges of a node by nodeID."),(0,t.yg)("h5",{id:"nodeid-stringnumber-required-2"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target node ID."),(0,t.yg)("h2",{id:"getnodemap"},"getNodeMap()"),(0,t.yg)("p",null,"Get the node map of the graph. The key of the map is the ID of the nodes."),(0,t.yg)("h2",{id:"getnodes"},"getNodes()"),(0,t.yg)("p",null,"Get all the nodes of the graph."),(0,t.yg)("h2",{id:"getnodesiblingsnodeid"},"getNodeSiblings(nodeId)"),(0,t.yg)("p",null,"Return all the sibling nodes of a node by nodeID."),(0,t.yg)("h5",{id:"nodeid-stringnumber-required-3"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target node ID."),(0,t.yg)("h2",{id:"isempty"},"isEmpty()"),(0,t.yg)("p",null,"Return true if the graph is empty."),(0,t.yg)("h2",{id:"removeedgeedgeid"},"removeEdge(edgeId)"),(0,t.yg)("p",null,"Remove an edge from the graph by the edge ID"),(0,t.yg)("h5",{id:"edgeid-stringnumber-required-2"},(0,t.yg)("inlineCode",{parentName:"h5"},"edgeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target edge ID."),(0,t.yg)("h2",{id:"removenodenodeid"},"removeNode(nodeId)"),(0,t.yg)("p",null,"Remove a node from the graph by node ID"),(0,t.yg)("h5",{id:"nodeid-stringnumber-required-4"},(0,t.yg)("inlineCode",{parentName:"h5"},"nodeId")," (String|Number, required)"),(0,t.yg)("p",null,"The target node ID."),(0,t.yg)("h2",{id:"reset"},"reset()"),(0,t.yg)("p",null,"Clean up everything in the graph."),(0,t.yg)("h2",{id:"resetedges"},"resetEdges()"),(0,t.yg)("p",null,"Clean up all the edges in the graph."),(0,t.yg)("h2",{id:"resetnodes"},"resetNodes()"),(0,t.yg)("p",null,"Clean up all the nodes in the graph."),(0,t.yg)("h1",{id:"transactioncb"},"transaction(cb)"),(0,t.yg)("p",null,"Perform a batch of operations defined by cb before indicating graph is updated"),(0,t.yg)("h5",{id:"cb-function-required"},(0,t.yg)("inlineCode",{parentName:"h5"},"cb")," (Function, required)"),(0,t.yg)("h2",{id:"updateedgeedge"},"updateEdge(edge)"),(0,t.yg)("p",null,"Update the indicated edge to the provided value"),(0,t.yg)("h5",{id:"edge-edge-required-1"},(0,t.yg)("inlineCode",{parentName:"h5"},"edge")," (Edge, required)"),(0,t.yg)("h2",{id:"updatenodenode"},"updateNode(node)"),(0,t.yg)("p",null,"Update the indicated node to the provided value"),(0,t.yg)("h5",{id:"node-node-required-1"},(0,t.yg)("inlineCode",{parentName:"h5"},"node")," (Node, required)"))}s.isMDXComponent=!0}}]);